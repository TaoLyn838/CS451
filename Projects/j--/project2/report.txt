1. Enter the number of hours it took you to complete the project between
   the <<< and >>> signs below (eg, <<<10>>>).

   <<< 17 >>>
   
2. Enter the difficulty level (1: very easy; 5: very difficult) of the project
   between <<< and >>> signs below (eg, <<<3>>>).

   <<< 2 >>>

3. Did you receive help from anyone? List their names, status (classmate, 
   CS451/651 grad, TA, other), and the nature of help received.

   Name               Status       Help Received
   ----               ------       -------------
   Piazza Post @31    Tech          Help me understand error output in the Gradescope.

4. Provide a short description of how you approached each problem, issues you 
   encountered, and how you resolved those issues.

   Problem 1 (Multiline Comment)
      Approach: 1) Open the 'Scanner.java' file, and find the '/' case in line 112.
                2) This problem want to implement /* ... */ (Multiline Comment) for j--. To accomplice it,
                    the first thing is to let the scanner know that after '/' is started or into a multiline
                    comment if 'nextCh()' is '*'. So, I set if condition inside (ch == '/') if next character
                    (nextCh()) equals '*', the scanner just keep scanner characters until the end of the line.
                3) Set END condition. Because the '*/' symbol means the end of Multiline Comment, otherwise scanning
                    character to 'EOFCH'. Thus, inside the while loop, I need to check if ch equals '*/'.
                    Since I need to check two characters, so I create a local variable called 'last_ch' to get the
                    current ch. I then let the character go next. If last_ch is '*' and the next character equals '/',
                    I can say here is the END of Multiline Comment. The Scanner should break out from this case.

      Issues and resolution: No issues in this problem.

   Problem 2 (Operators)
      Approach: 1) Open the 'TokenInfo.java' file to define tokens that problem 2 required. For make my code easier to
                    read and see, I add these tokens in the 'Proj_2' range which between line 35 to 38.
                2) Open the 'Scanner.java' file, and to recognize these new tokens that I write in 'TokenInfo.java':
                    a. Looking for each tokens' first character in the 'Scanner.java' file, if the scanner has it
                    in case, I just to add new condition, and return a new TokenInfo() for it.
                    b. if the scanner doesn't have the case that relate to new tokens' first character, I add new case
                    for it, and return a new TokenInfo() for it.

      Issues and resolution: No issues in this problem.
   
   Problem 3 (Reserved Words)
      Approach: 1) Open the 'TokenInfo.java' file to define tokens that problem 3 required. I add these tokens
                    in the 'Proj_2' range which between line 40 to 43.
                2) Open the 'Scanner.java' file, I find a common in line 50 that wrote "Keywords in j--". I then know
                here is the place to recognize key worlds in j--. Thus, I imitate the code under this common which
                line 51 to 75, and put new keywords between line 78 to 93.

      Issues and resolution: No issues in this problem.

   Problem 4 (Literals)
      Approach: 1) Open the 'TokenInfo.java' file to define tokens that problem 4 required. I add these tokens at line
                    45 in the 'Proj_2' range.
                2) I draw an NFA graph in paper to design implement code.
                3) Open the 'Scanner.java' file, and move '.' case in line 365.
                4) Following my diagram implement all conditions of question 4 between line 366 to 405.
                5) Add 3 helper methods between line 519 to 574 line to make code clear and better to read.

      Issues and resolution: 1) The first problem I meet that is '.' case. It's in a different place or line of digit
                                 case. This means that I need to write a lot of duplicate code to implement my NFA
                                 diagram, and it will make my code and NFA diagram a little different.
                                 Solution: move '.' case under digit case.
                             2) Feel confused about the error output in the Gradescope.
                                Solution: When I decide to piazza to post question about how to read the error output
                                            in Gradescope. I then find someone already asked this problem before, which
                                            is 'question@ 31'. After I read the student's answer I see that the correct
                                            output should be matched the '.tokens' files in project. Finally I know how
                                            to fix my errors.
                             3) My code is too long, which hard to debug and read.
                                Solution: I add three helper methods.

5. List any other comments here. Feel free to provide any feedback on how
   much you learned from doing the assignment, and whether you enjoyed
   doing it.

   The biggest takeaway of this project is that I understand scanner better after implement tokens in project 3.
